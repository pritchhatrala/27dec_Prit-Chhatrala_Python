18. Understanding iterators and creating custom iterators.

An iterator is an object that allows you to iterate over a sequence of values (like a list, tuple, or string) one at a time, without needing to store the entire sequence in memory. In Python, an iterator implements two important methods:

__iter__(): This method returns the iterator object itself. It's called when an iterator is created from a collection.

__next__(): This method returns the next item in the sequence. If there are no more items left, it raises a StopIteration exception to signal that the iteration is complete.

Python collections like lists, tuples, and dictionaries are iterable, meaning they can be used in a loop (like a for loop) because they implement the __iter__() and __next__() methods. These collections are automatically converted into iterators when used in loops.

Example: Custom Iterator for Counting
class Counter:
    def __init__(self, low, high):
        self.current = low  # Start value
        self.high = high     # End value

    # Make the object iterable
    def __iter__(self):
        return self  # Return the iterator object itself

    # Implement the next method
    def __next__(self):
        if self.current > self.high:
            raise StopIteration  # Stop iteration if limit is reached
        else:
            self.current += 1  # Increment the current value
            return self.current - 1  # Return the current value before incrementing

# Create an iterator object
counter = Counter(1, 5)

# Using the iterator
for number in counter:
    print(number)

-------How the Custom Iterator Works
__iter__(): The __iter__() method returns the iterator object itself (self in this case). This is required for making the object iterable.

__next__(): The __next__() method returns the current value of self.current, and then increments it. If self.current exceeds self.high, it raises the StopIteration exception to signal the end of the iteration.

Example with next():
# Using the next function to manually fetch items
counter = Counter(1, 3)

print(next(counter))  # Output: 1
print(next(counter))  # Output: 2
print(next(counter))  # Output: 3

# This will raise StopIteration when no more items are left
# print(next(counter))  # Uncommenting this line will raise StopIteration
